<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.mng.dao.MngDAO">

	<!-- 강의피드백 설문조사 총건 -->
	<select id="surveyListCnt" resultType="int" parameterType="map">

		select count(1)
		FROM tb_courselist cl
		
		inner join
		(select ci.class_no, ci.loginID, ci.class_nm, ci.class_startdate, ci.class_enddate, ui2.name
		FROM tb_classinfo ci
		  inner join
		  (select ui1.loginID, ui1.name FROM tb_userinfo ui1) ui2
		  on ci.loginID = ui2.loginID) cii
		on cl.class_no = cii.class_no
		
		inner join
		(select ui3.loginID, ui3.name, ui3.user_type FROM tb_userinfo ui3) ui4
		on cl.loginID = ui4.loginID
		
		inner join
		(select appraisal_no, loginID, class_no from tb_appraisal) ap
		on cl.loginID = ap.loginID and cl.class_no = ap.class_no
		
		<where>
			<if test="(!oname.equals('') and (oname eq 'A'.toString()))">			  
				and cii.name like concat('%', #{sname}, '%')
			</if>
			
			<if test="(!oname.equals('')) and oname eq 'B'.toString()">			  
				and cii.class_nm like concat('%', #{sname}, '%')
			</if>
			
			<if test="(!s_loginID.equals(''))">
				and ui4.loginID = #{s_loginID}
			</if>
		</where>
	</select>
	
	<!-- 설문조사 목록조회  -->
	<select id="surveyListSelect" resultType="map" parameterType="map">
		select cl.class_no, cii.class_nm, cii.class_startdate, cii.class_enddate, ui4.name as s_name, cii.name as t_name , ap.appraisal_no
		FROM tb_courselist cl
		
		inner join
		(select ci.class_no, ci.loginID, ci.class_nm, ci.class_startdate, ci.class_enddate, ui2.name
		FROM tb_classinfo ci
		  inner join
		  (select ui1.loginID, ui1.name FROM tb_userinfo ui1) ui2
		  on ci.loginID = ui2.loginID) cii
		on cl.class_no = cii.class_no
		
		inner join
		(select ui3.loginID, ui3.name, ui3.user_type FROM tb_userinfo ui3) ui4
		on cl.loginID = ui4.loginID
		
		inner join
		(select appraisal_no, loginID, class_no from tb_appraisal) ap
		on cl.loginID = ap.loginID and cl.class_no = ap.class_no
		  
		<where>
			<if test="(!oname.equals('') and (oname eq 'A'.toString()))">			  
				and cii.name like concat('%', #{sname}, '%')
			</if>
			
			<if test="(!oname.equals('')) and oname eq 'B'.toString()">			  
				and cii.class_nm like concat('%', #{sname}, '%')
			</if>
			
			<if test="(!s_loginID.equals(''))">
				and ui4.loginID = #{s_loginID}
			</if>

		</where>
		ORDER BY cii.class_enddate DESC
		LIMIT #{pageIndex}, #{pageSize} 
	</select>
	
	<!-- 설문조사 상세 -->
	<select id="surveySelectDetail" parameterType="map" resultType="map" >
	
		select ap.class_no, ap.appraisal_content, ap.appraisal_score, ci.class_enddate, ap.appraisal_no
		FROM tb_appraisal ap
		
		inner join
		(select class_no, class_enddate from tb_classinfo) ci
		on ap.class_no = ci.class_no
		
		where ap.appraisal_no = #{appraisal_no}
	
	</select>
	
	<update id="surveyUpdate" parameterType="map">
		
		update tb_appraisal
		set
		
			appraisal_score = #{appraisal_score},
			appraisal_content = #{appraisal_content}
			
		where appraisal_no = #{appraisal_no}
	</update>
		
	<!-- 검색 콤보박스 -->
	<select id="search_combo" parameterType="String" resultType="String">
		
		select distinct class_type from tb_classinfo
		where loginID = #{s_loginID}
		order by class_type
		
	</select>
		
	<!-- 설문결과 총건 -->
	<select id="ResultCnt" parameterType="map" resultType="int">
		
		select count(1)
		FROM tb_classinfo ci
		
		inner join
		(select class_no, avg(appraisal_score) as avg 
		FROM tb_appraisal
		group by tb_appraisal.class_no
		) ap
		on ci.class_no = ap.class_no
		
		inner join
		(select class_no, COUNT(*) as cnt
		FROM tb_courselist
		group by class_no
		) cl
		on ci.class_no = cl.class_no
		
		inner join
		(select loginID, name from tb_userinfo) ui
		on ci.loginID = ui.loginID
		
		<where>
			ci.loginID = #{s_loginID}
			<if test="(!searchkey.equals(''))">
				and ci.class_type = #{searchkey}
			</if>
		</where>
		
	</select>
	
	<!-- 설문결과 목록 조회 -->
	<select id="apResultListSelect" parameterType="map" resultType="map">
		select ci.class_no, ci.class_type, ci.class_nm, ci.loginID, ui.name as t_name, ci.class_startdate, ci.class_enddate, cl.cnt as count_student, ap.avg as average, ap.appraisal_no
		FROM tb_classinfo ci
		
		inner join
		(select class_no, avg(appraisal_score) as avg, appraisal_no
		FROM tb_appraisal
		group by tb_appraisal.class_no
		) ap
		on ci.class_no = ap.class_no
		
		inner join
		(select class_no, COUNT(*) as cnt
		FROM tb_courselist
		group by class_no
		) cl
		on ci.class_no = cl.class_no
		
		inner join
		(select loginID, name from tb_userinfo) ui
		on ci.loginID = ui.loginID
		
		<where>
			ci.loginID = #{s_loginID}
			<if test="(!searchkey.equals(''))">
				and ci.class_type = #{searchkey}
			</if>
		</where>
		ORDER BY ci.class_no DESC
		LIMIT #{pageIndex}, #{pageSize}
		
	</select>
	
	<!-- 설문조사 상세 -->
	<select id="apSelectDetail" parameterType="map" resultType="map" >
	
		select ap.class_no, ap.appraisal_content, ap.appraisal_score, ci.class_enddate, ap.appraisal_no
		FROM tb_appraisal ap
		
		inner join
		(select class_no, class_enddate from tb_classinfo) ci
		on ap.class_no = ci.class_no
		
		where ap.appraisal_no = #{appraisal_no}
	
	</select>
	
	<!-- 세부리스트 총건 -->
	<select id="DtlResultCnt" parameterType="map" resultType="int">
	
		select count(1)

		FROM tb_appraisal ap
		
		inner join
		(select ui.loginID, ui.name FROM tb_userinfo ui) uii
		on ap.loginID = uii.loginID
		
		where ap.class_no = #{class_no}
	
	</select>
	
	<!-- 세부리스트 -->
	<select id="apListDtl" parameterType="map" resultType="map">
	
		select ap.appraisal_no, uii.name

		FROM tb_appraisal ap
		
		inner join
		(select ui.loginID, ui.name FROM tb_userinfo ui) uii
		on ap.loginID = uii.loginID
		
		where ap.class_no = #{class_no}
		ORDER BY ap.appraisal_no DESC
		LIMIT #{pageIndex}, #{pageSize}
	</select>
	
	<select id="survey_endclass" parameterType="map" resultType="map">
		
		select distinct cl.class_no
		FROM tb_courselist cl
		
		inner join
		(select ci.class_no, ci.class_enddate
		 FROM tb_classinfo ci
		 ) cii
		 on cl.class_no = cii.class_no
		 
		 where cl.loginID = #{s_loginID}
		 and NOW() between date_add(cii.class_enddate, interval -3 day) and date_add(cii.class_enddate, interval 3 day)
		 and cl.class_no
		 not in
		 (select ap.class_no FROM tb_appraisal ap)
		 
	</select>
	
	<insert id="survey_insert">
	
		insert into tb_appraisal (
		
		   	appraisal_no
		  ,	class_no
		  ,	loginID
		  ,	appraisal_content
		  ,	appraisal_score
		  
		) VALUES (
		
		   	NULL 
		  ,	#{class_no}
		  ,	#{s_loginID}
		  ,	''  
		  ,	0   
		  
		)
	
	</insert>

</mapper>